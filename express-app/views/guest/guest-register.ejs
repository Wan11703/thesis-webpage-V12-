<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="/css/style.css" />
    <link rel="stylesheet" href="/css/guest/guest-register.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <title>MedExtract</title>
</head>

<body>
    <nav class="guest-navbar">
        <div class="container">
            <div class="logo">
                <a href="/">
                    <img src="/images/logo-nav.png" alt="MedExtract Logo" class="logo-img" />
                </a>
            </div>

            <ul class="nav" id="guest-nav">
                <li><a href="/">Home</a></li>
                <li><a href="/html/guest/guest-about.html">About</a></li>
                <li><a href="/guest-login">Login</a></li>
                <li><a href="/guest-register">Register</a></li>
            </ul>

        </div>
    </nav>

    <div id="server-message" class="server-message hidden">
        <img id="server-message-icon" src="/images/icons/seal-check.svg" alt="Status Icon"
            class="server-message-icon" />
        <span id="server-message-text">This is a server message</span>
        <img id="server-message-close" src="/images/icons/x-circle.svg" alt="Close" class="server-message-close" />
    </div>

    <section class="register">
        <div class="container">
            <form id="form" action="/register" method="POST">
                <h1>Registration</h1>
                <div class="input-control">
                    <label for="username">Username</label>
                    <input id="username" name="username" type="text" />
                    <div class="error"></div>
                </div>
                <div class="input-control">
                    <label for="email">Email</label>
                    <input id="email" name="email" type="text" />
                    <div class="error"></div>
                </div>
                <div class="input-control">
                    <label for="password1">Password</label>
                    <input id="password1" name="password1" type="password" />
                    <div class="error"></div>
                    <div class="password">
                        <label for="show-password1">Show Password</label>
                        <input type="checkbox" id="show-password1" class="show-password" />
                    </div>
                </div>
                <div class="input-control">
                    <label for="password2">Confirm Password</label>
                    <input id="password2" name="password2" type="password" />
                    <div class="error"></div>
                    <div class="password">
                        <label for="show-password2">Show Password</label>
                        <input type="checkbox" id="show-password2" class="show-password" />
                    </div>
                </div>
                <button id="open" type="submit">Sign Up</button>
            </form>
        </div>
    </section>

    <footer class="footer">
        <div class="container">
            <div class="f-1">
                <a href="/">
                    <img src="/images/logo-footer.png" alt="MedExtract Logo" class="logo-img" />
                </a>
                <p>
                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Adipisci,
                    id aspernatur itaque cumque vitae odit sint eligendi nam libero
                    voluptate magni aperiam, veniam ullam tenetur quidem nostrum enim
                    eos a.
                </p>
            </div>

            <div class="f-2">
                <div>
                    <h2>Links</h2>
                    <ul class="nav">
                        <li><a href="/">Home</a></li>
                        <li><a href="/html/guest/guest-about.html">About</a></li>
                        <li><a href="/guest-login">Login</a></li>
                        <li><a href="/guest-register">Register</a></li>
                    </ul>
                </div>
            </div>

            <div class="f-3">
                <h2>Contacts</h2>
                <div class="contacts">
                    <div>
                        <img src="/Flaticons/index/location.png" /> &nbsp;
                        <p>
                            University of The East Caloocan, 105 Samson Rd, Caloocan, Metro
                            Manila
                        </p>
                    </div>
                    <div>
                        <img src="/Flaticons/index/email.png" /> &nbsp;
                        <p>nogot.markvincent@ue.edu.ph</p>
                    </div>
                    <div>
                        <img src="/Flaticons/index/call.png" /> &nbsp;
                        <p>09991624156</p>
                    </div>
                </div>
            </div>
        </div>
    </footer>

    <script>
        const form = document.getElementById("form");
        const username = document.getElementById("username");
        const email = document.getElementById("email");
        const password1 = document.getElementById("password1");
        const password2 = document.getElementById("password2");

        const toggle1 = document.getElementById("show-password1");
        const toggle2 = document.getElementById("show-password2");

        serverMessage = document.querySelector(".server-message");
        serverMessageContainer = document.querySelector(".message-container .container");

        toggle1.addEventListener("click", () => {
            if (toggle1.checked) {
                password1.setAttribute("type", "text");
            } else {
                password1.setAttribute("type", "password");
            }
        });

        toggle2.addEventListener("click", () => {
            if (toggle2.checked) {
                password2.setAttribute("type", "text");
            } else {
                password2.setAttribute("type", "password");
            }
        });

        form.addEventListener("submit", async (e) => {
            e.preventDefault();

            // Reset all previous validation errors
            const inputControls = form.querySelectorAll(".input-control");
            inputControls.forEach(ic => {
                ic.classList.remove("error", "success");
                ic.querySelector(".error").innerText = "";
            });

            // Validate inputs
            validateInputs();

            const errors = form.querySelectorAll(".error");
            const hasErrors = Array.from(errors).some(err => err.innerText !== "");
            if (hasErrors) return; // stop submission if client validation fails

            // Send form data to server
            const formData = new FormData(form);

            try {
                const res = await fetch("/register", {
                    method: "POST",
                    body: formData,
                });

                const message = await res.text();

                if (!res.ok) throw new Error(message);

                // ✅ Success
                showServerMessage(message, "success");
                setTimeout(() => {
                    window.location.href = "/guest-login";
                }, 1500);

            } catch (err) {
                // ❌ Server error — user can retry immediately
                showServerMessage(err.message, "error");
            }
        });


        function sendUserDataToServer() {
            const formData = new FormData(form);

            fetch("/register", {
                method: "POST",
                body: formData,
            })
                .then(async (response) => {
                    const message = await response.text();

                    if (!response.ok) {
                        throw new Error(message); // Will go to catch
                    }

                    showServerMessage(message, "success"); // ✅ Show success message

                    setTimeout(() => {
                        window.location.href = "/guest-login";
                    }, 1500);
                })
                .catch((error) => {
                    showServerMessage(error.message, "error"); // ❌ Show error message
                });
        }


        const setError = (element, message) => {
            const inputControl = element.parentElement;
            const errorDisplay = inputControl.querySelector(".error");

            errorDisplay.innerText = message;
            inputControl.classList.add("error");
            inputControl.classList.remove("success");
        };

        const setSuccess = (element) => {
            const inputControl = element.parentElement;
            const errorDisplay = inputControl.querySelector(".error");

            errorDisplay.innerText = "";
            inputControl.classList.add("success");
            inputControl.classList.remove("error");
        };

        const isValidEmail = (email) => {
            const re =
                /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
            return re.test(String(email).toLowerCase());
        };

        const validateInputs = () => {
            const usernameValue = username.value.trim();
            const emailValue = email.value.trim();
            const password1Value = password1.value.trim();
            const password2Value = password2.value.trim();

            if (usernameValue === "") {
                setError(username, "Username is required");
            } else {
                setSuccess(username);
            }

            if (emailValue === "") {
                setError(email, "Email is required");
            } else if (!isValidEmail(emailValue)) {
                setError(email, "Provide a valid email address");
            } else {
                setSuccess(email);
            }

            if (password1Value === "") {
                setError(password1, "Password is required");
            } else if (password1Value.length < 8) {
                setError(password1, "Password must be at least 8 character.");
            } else {
                setSuccess(password1);
            }

            if (password2Value === "") {
                setError(password2, "Please confirm your password");
            } else if (password2Value !== password1Value) {
                setError(password2, "Passwords doesn't match");
            } else {
                setSuccess(password2);
            }
        };

        // toggle.addEventListener('click', () => {
        //     nav.classList.toggle('show');
        // });

        let serverMessageTimeout = null;

        function showServerMessage(message, type = "success") {
            const serverMessage = document.getElementById("server-message");
            const messageText = document.getElementById("server-message-text");
            const messageIcon = document.getElementById("server-message-icon");

            // Reset classes
            serverMessage.classList.remove("success", "error");

            // Set text
            messageText.textContent = message;

            // Apply type + icon
            if (type === "success") {
                serverMessage.classList.add("success");
                messageIcon.src = "/images/icons/seal-check-green.svg";
            } else if (type === "error") {
                serverMessage.classList.add("error");
                messageIcon.src = "/images/icons/seal-warning-red.svg";
            }

            // Show with animation
            serverMessage.classList.remove("hidden");
            serverMessage.classList.add("show");

            // Save to sessionStorage so it survives reload
            sessionStorage.setItem(
                "serverMessage",
                JSON.stringify({ message, type })
            );

            // Reset timer if already running
            if (serverMessageTimeout) clearTimeout(serverMessageTimeout);

            // Auto-close after 3s
            serverMessageTimeout = setTimeout(() => {
                hideServerMessage();
            }, 3000);
        }

        function hideServerMessage() {
            const serverMessage = document.getElementById("server-message");

            // Stop timer
            if (serverMessageTimeout) clearTimeout(serverMessageTimeout);

            // Remove from sessionStorage
            sessionStorage.removeItem("serverMessage");
            serverMessageTimeout = null;

            // Animate out
            serverMessage.classList.remove("show");

            setTimeout(() => {
                serverMessage.classList.add("hidden");
            }, 400); // matches CSS transition
        }

        // Close button → hide immediately & clear sessionStorage
        document
            .getElementById("server-message-close")
            .addEventListener("click", () => {
                hideServerMessage();
            });

        window.addEventListener("load", () => {
            const stored = sessionStorage.getItem("serverMessage");
            if (stored) {
                const { message, type } = JSON.parse(stored);
                if (message) showServerMessage(message, type);
                // don’t remove here — showServerMessage will auto-remove after timeout
            }
        });

    </script>
</body>

</html>